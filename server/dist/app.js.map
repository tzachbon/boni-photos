{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA+C;AAC/C,oDAA8B;AAC9B,8CAAwB;AACxB,sEAAoE;AACpE,gFAA6E;AAC7E,2EAAoD;AACpD,oDAA8C;AAE9C,IAAM,OAAO,GAAG,IAAI,sBAAO,EAAE,CAAC;AAC9B,IAAM,GAAG,GAAwB,iBAAO,EAAE,CAAC;AAC3C,IAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAEtC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,iBAAO,CAAC,MAAM,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;AAC/D,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AAC1C,GAAG,CAAC,GAAG,CAAC,wBAAU,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACxD,GAAG,CAAC,GAAG,CAAC,sCAAiB,CAAC,CAAC;AAG3B,GAAG,CAAC,GAAG,CAAC,iBAAiB,EAAE,wBAAa,CAAC,CAAC;AAC1C,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,+CAAqB,CAAC,CAAC;AACvC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAO,GAAG,EAAE,GAAG,EAAE,IAAI;;QAChC,OAAO,CAAC,aAAa,EAAE,CAAC;QACxB,IAAI,EAAE,CAAC;;;KACR,CAAC,CAAC;AAEH,GAAG,CAAC,GAAG,CACL,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI;IACb,GAAG,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC;AAC/D,CAAC,CACF,CAAC;AAKF,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACjB,OAAO,CAAC,GAAG,CAAC,kBAAgB,IAAM,CAAC,CAAC","sourcesContent":["import { json, urlencoded } from 'body-parser';\nimport express from 'express';\nimport path from 'path';\nimport { headersController } from './controller/headers.controller';\nimport { healthCheckController } from './controller/health-check.controller';\nimport contactRoutes from './routes/contact.routes';\nimport { Counter } from './util/counter.util';\n\nconst counter = new Counter();\nconst app: express.Application = express();\nconst port = process.env.PORT || 3088;\n\napp.use('/', express.static(path.join(__dirname, 'frontend')));\napp.use('/api', json({ limit: '500mb' }));\napp.use(urlencoded({ limit: '500mb', extended: true }));\napp.use(headersController);\n\n// API\napp.use('/api/contact-us', contactRoutes);\napp.use('/api', healthCheckController);\napp.use('/', async (req, res, next) => {\n  counter.updateCounter();\n  next();\n});\n\napp.use(\n  (req, res, next) => {\n    res.sendFile(path.join(__dirname, 'frontend', 'index.html'));\n  }\n);\n\n\n\n\napp.listen(port);\nconsole.log(`Listening to ${port}`);\n"]}